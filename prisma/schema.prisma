// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  category    String
  images      String[]
  brand       String
  description String
  stock       String
  price       Float
  rating      Float?
  numReviews  String?
  isFeatured  Boolean  @default(false)
  banner      String?

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt

  orderItem OrderItem[]
  review    Review[]
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @default("NO_NAME")
  email          String    @unique
  emailVerified  DateTime? @db.Timestamp()
  image          String?
  hashedPassword String?
  role           Role      @default(USER)

  paymentMethod PaymentMethod @default(None)

  createdAt       DateTime          @default(now()) @db.Timestamp()
  updatedAt       DateTime          @updatedAt
  account         Account[]
  session         Session[]
  cart            Cart[]
  shippingAddress ShippingAddress[]
  order           Order[]
  review          Review[]
}

enum Role {
  ADMIN
  USER
}

enum PaymentMethod {
  PayPal
  Stripe
  CashOnDelivery
  None
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @db.Timestamp()
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime @db.Timestamp()

  @@unique([identifier, token])
}

model Cart {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String? @db.ObjectId
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionCartId String

  itemsPrice    String
  totalPrice    String
  shippingPrice String
  taxPrice      String

  createdAt DateTime   @default(now()) @db.Timestamp()
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model ShippingAddress {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  streetAddress String
  city          String
  postalCode    String
  country       String
  lat           String @default("")
  lng           String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String @db.ObjectId
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  name      String
  slug      String
  qty       String
  image     String
  price     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingAddressId String          @db.ObjectId
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  paymentMethod     PaymentMethod

  itemsPrice    String
  shippingPrice String
  taxPrice      String
  totalPrice    String
  isPaid        Boolean   @default(false)
  paidAt        DateTime? @db.Timestamp
  isDelivered   Boolean   @default(false)
  deliveredAt   DateTime? @db.Timestamp

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt

  orderitems    OrderItem[]
  paymentResult PaymentResult[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  qty       String
  price     String
  name      String
  slug      String
  image     String

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model PaymentResult {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  paymentId     String
  orderId       String  @db.ObjectId
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status        String?
  email_address String?
  pricePaid     String

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model Review {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId          String  @db.ObjectId
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean @default(true)

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}
